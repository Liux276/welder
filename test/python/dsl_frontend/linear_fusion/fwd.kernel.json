[
  {
    "nodes": [
      4
    ],
    "node_names": [
      "FusedLayer_4"
    ],
    "group_id": 0,
    "input_desc": [
      [
        4,
        0
      ],
      [
        4,
        1
      ],
      [
        4,
        2
      ],
      [
        4,
        3
      ]
    ],
    "output_desc": [
      [
        4,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group0(half* __restrict__ input0, half* __restrict__ input1, half* __restrict__ input2, half* __restrict__ input3, half* __restrict__ output0) {\n  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 8, 32, 16, half> m4_wmma_accumulator[8];\n  __shared__ half m3_shared[4608];\n  __shared__ half input1_shared[9216];\n  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 8, 32, 16, half, nvcuda::wmma::row_major> m3_shared_wmma_matrix_a[8];\n  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 8, 32, 16, half, nvcuda::wmma::col_major> input1_shared_wmma_matrix_b[1];\n  for (int N0_c_outer_init = 0; N0_c_outer_init < 8; ++N0_c_outer_init) {\n    nvcuda::wmma::fill_fragment(m4_wmma_accumulator[N0_c_outer_init], 0.000000e+00f);\n  }\n  for (int N1_outer = 0; N1_outer < 256; ++N1_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_inner_s = 0; ax0_ax1_fused_inner_s < 4; ++ax0_ax1_fused_inner_s) {\n      m3_shared[((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s)] = ((((half)((((float)input0[(((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[(((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s)]) * 7.071068e-01f))))) * input3[(((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_1 = 0; ax0_ax1_fused_inner_s_1 < 4; ++ax0_ax1_fused_inner_s_1) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_1) + 576)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_1) + 131072)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_1) + 131072)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_1) + 131072)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_2 = 0; ax0_ax1_fused_inner_s_2 < 4; ++ax0_ax1_fused_inner_s_2) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_2) + 1152)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_2) + 262144)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_2) + 262144)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_2) + 262144)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_3 = 0; ax0_ax1_fused_inner_s_3 < 4; ++ax0_ax1_fused_inner_s_3) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_3) + 1728)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_3) + 393216)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_3) + 393216)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_3) + 393216)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_4 = 0; ax0_ax1_fused_inner_s_4 < 4; ++ax0_ax1_fused_inner_s_4) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_4) + 2304)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_4) + 524288)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_4) + 524288)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_4) + 524288)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_5 = 0; ax0_ax1_fused_inner_s_5 < 4; ++ax0_ax1_fused_inner_s_5) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_5) + 2880)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_5) + 655360)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_5) + 655360)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_5) + 655360)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_6 = 0; ax0_ax1_fused_inner_s_6 < 4; ++ax0_ax1_fused_inner_s_6) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_6) + 3456)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_6) + 786432)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_6) + 786432)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_6) + 786432)]) * __float2half_rn(2.000000e+00f));\n    }\n    for (int ax0_ax1_fused_inner_s_7 = 0; ax0_ax1_fused_inner_s_7 < 4; ++ax0_ax1_fused_inner_s_7) {\n      m3_shared[(((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_7) + 4032)] = ((((half)((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_7) + 917504)]) * 5.000000e-01f) * (1.000000e+00f + erff((((float)input0[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_7) + 917504)]) * 7.071068e-01f))))) * input3[((((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 4) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 15) * 4)) + ax0_ax1_fused_inner_s_7) + 917504)]) * __float2half_rn(2.000000e+00f));\n    }\n    *(uint4*)(input1_shared + (((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8))) = *(uint4*)(input1 + ((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 1152)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 262144));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2304)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 524288));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 3456)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 786432));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4608)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 1048576));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 5760)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 1310720));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6912)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 1572864));\n    *(uint4*)(input1_shared + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8064)) = *(uint4*)(input1 + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 3) * 16384)) + (N1_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 1835008));\n    __syncthreads();\n    for (int N1_inner_outer = 0; N1_inner_outer < 4; ++N1_inner_outer) {\n      for (int ax0_outer = 0; ax0_outer < 8; ++ax0_outer) {\n        nvcuda::wmma::load_matrix_sync(m3_shared_wmma_matrix_a[ax0_outer], (&(m3_shared[((ax0_outer * 576) + (N1_inner_outer * 16))])), 72);\n      }\n      nvcuda::wmma::load_matrix_sync(input1_shared_wmma_matrix_b[0], (&(input1_shared[((((int)threadIdx.y) * 2304) + (N1_inner_outer * 16))])), 72);\n      for (int N0_c_outer = 0; N0_c_outer < 8; ++N0_c_outer) {\n        nvcuda::wmma::mma_sync(m4_wmma_accumulator[N0_c_outer], m3_shared_wmma_matrix_a[N0_c_outer], input1_shared_wmma_matrix_b[0], m4_wmma_accumulator[N0_c_outer]);\n      }\n    }\n  }\n  __syncthreads();\n  for (int ax0_inner_outer = 0; ax0_inner_outer < 8; ++ax0_inner_outer) {\n    nvcuda::wmma::store_matrix_sync((&(input1_shared[((ax0_inner_outer * 1088) + (((int)threadIdx.y) * 32))])), m4_wmma_accumulator[ax0_inner_outer], 136, nvcuda::wmma::mem_row_major);\n  }\n  __syncthreads();\n  for (int N0_inner_N2_inner_fused_outer_outer_outer = 0; N0_inner_N2_inner_fused_outer_outer_outer < 8; ++N0_inner_N2_inner_fused_outer_outer_outer) {\n    uint4 __1;\n      uint4 __2 = *(uint4*)(input1_shared + ((((N0_inner_N2_inner_fused_outer_outer_outer * 1088) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)));\n      uint4 __3 = make_uint4(__pack_half2(input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))], input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))]), __pack_half2(input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))], input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))]), __pack_half2(input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))], input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))]), __pack_half2(input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))], input2[(((((((int)blockIdx.x) >> 5) * 64) + (N0_inner_N2_inner_fused_outer_outer_outer * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4))]));\n      ((half2*)(&(__1.x)))->x = (((half2*)(&(__2.x)))->x+((half2*)(&(__3.x)))->x);\n      ((half2*)(&(__1.x)))->y = (((half2*)(&(__2.x)))->y+((half2*)(&(__3.x)))->y);\n      ((half2*)(&(__1.y)))->x = (((half2*)(&(__2.y)))->x+((half2*)(&(__3.y)))->x);\n      ((half2*)(&(__1.y)))->y = (((half2*)(&(__2.y)))->y+((half2*)(&(__3.y)))->y);\n      ((half2*)(&(__1.z)))->x = (((half2*)(&(__2.z)))->x+((half2*)(&(__3.z)))->x);\n      ((half2*)(&(__1.z)))->y = (((half2*)(&(__2.z)))->y+((half2*)(&(__3.z)))->y);\n      ((half2*)(&(__1.w)))->x = (((half2*)(&(__2.w)))->x+((half2*)(&(__3.w)))->x);\n      ((half2*)(&(__1.w)))->y = (((half2*)(&(__2.w)))->y+((half2*)(&(__3.w)))->y);\n    *(uint4*)(output0 + (((((((((int)blockIdx.x) >> 5) * 262144) + (N0_inner_N2_inner_fused_outer_outer_outer * 32768)) + (((int)threadIdx.y) * 8192)) + ((((int)threadIdx.x) >> 4) * 4096)) + ((((int)blockIdx.x) & 31) * 128)) + ((((int)threadIdx.x) & 15) * 8))) = __1;\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      1024,
      1,
      1
    ],
    "latency": 5.927213191986084,
    "name": "Group0",
    "gain": 0
  }
]